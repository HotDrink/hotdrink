#+TITLE: Introduction to HotDrink
#+LANGUAGE:  en
#+OPTIONS: H:2 author:nil creator:nil
#+INFOJS_OPT: sdepth:1 home:index.html
#+HTML_HEAD_EXTRA: <script type="text/javascript" src="hotdrink.min.js"></script>
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="style.css"/>

* Overview of basic concepts

HotDrink is a JavaScript library that assists with GUI implementation.
HotDrink allows you to program GUIs /declaratively/---instead of
writing event handlers that control what should happen in a GUI and when,
the programmer specifies the relationships between various pieces of
data in the GUI and ways in which those relationships may be enforced.
From this description, HotDrink decides how and when to enforce relationships,
and also implements several GUI behaviors
that can be reused with little effort.

** Constraint systems

The heart of the HotDrink library is a /constraint system/.  A
constraint system manages variables and /constraints/ among the variables.  Each
constraint represents something that should be true concerning some of the
variables (i.e., a /relation/ over those variables).
For example, given three variables, $x$, $y$, and $z$, you
could create a constraint that $x = y + z$, or that $x \le y \le z$, or even that $z$
is the result of a database query using $x$ and $y$.  When the
constraint is true, we say it is /satisfied/.  HotDrink /enforces/ a
constraint by modifying some of the variables involved so that the constraint is
satisfied.

In HotDrink's constraint system, constraints between variables are expressed
as sets of functions.  These functions are called /methods/ (short for
/constraint satisfaction methods/) and are written by the programmer.  Each
method is responsible for calculating new values for some of the constraint's
variables so that the constraint will be satisfied.  To enforce all
constraints, HotDrink executes one method from each constraint.  Together, the
methods executed define a /dataflow/ --- a branching path showing which
variables are used to update which other variables.  HotDrink has a
/multi-way dataflow constraint system/, meaning there are many possible
dataflows depending on which methods are executed.  In general, HotDrink
selects a dataflow that preserves variables the user has edited more recently.

In a HotDrink \ldquo{}powered\rdquo{} user interface, GUI events are translated to changes
to constraint system variables.  These changes result
in constraints which are no longer satisfied.  HotDrink
responds by /solving/ the constraint system --- that is, selecting which methods
to execute, and then executing them so that all constraints are again
satisfied.  Solving can change the values of the system's variables; the
changed values are then somehow
displayed or visualized to the user, as specified by the programmer.

** MVVM

Applications written with HotDrink follow the Model-View-ViewModel
(a.k.a. MVVM) design pattern.  This pattern divides the application as
follows:

- The /view/ is responsible for presentation and capturing
  interactions with the user.  It arranges everything on the screen
  and provides events that indicate user actions.  For our purposes,
  the view is specified in HTML, along with JavaScript that
  generates and modifies the HTML.  This tutorial shows bits and snippets of HTML, with
  some commentary to help understand the examples, but in general we assume familiarity
  with HTML, JavaScript, and constructing web pages.

- The /view-model/ is responsible for managing the data presented in
  the view. This means supplying the data to the view to be displayed,
  as well as responding to user actions.  The purpose of
  HotDrink is to help in implementing the view-model.

- Another important part of an MVVM application are the /bindings/.  A
  binding connects elements in the view with variables in the
  view-model.  The bindings are sometimes treated as part of the
  view---that is why there is no "B" in "MVVM"---but we treat them as
  a distinct component of the pattern.  In HotDrink, bindings can be
  specified in JavaScript, or as annotations in HTML as part of the
  view specification.

- The /model/ is responsible for everything else---whatever the
  application is actually supposed to /do/.  The model does not need to
  be aware of the user interface; therefore we will not discuss it further in
  this documentation.

* Including HotDrink in your web page

To use HotDrink, include the file [[file:hotdrink.min.js][=hotdrink.min.js=]] that came with
this tutorial.  Alternatively, if you downloaded the source tree,
follow the build instructions to compile your own =hotdrink.min.js=.

More specifically, that means adding the following ~<script>~ tag to
the ~<head>~ section
of your HTML, with the appropriate path in the ~src~ attribute.  In
order for the examples in this tutorial to work, the file
=hotdrink.min.js= must be located in the same directory as this HTML
file.

#+BEGIN_SRC html
<script type="text/javascript" src="hotdrink.min.js"></script>
#+END_SRC

HotDrink does not rely on any other JavaScript frameworks, but neither should it
conflict with other frameworks (JQuery, Dojo, MooTools, etc.).
The only global symbol it exports is ~hd~, and all of its interactions
with the DOM are via cooperative API functions, e.g.,
[[https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener][~addEventListener~]], etc.

* Important HotDrink objects

There are three important objects which you will need to interact with when
using HotDrink.

** The model

The model is HotDrink's representation of the data in your
interface. Though we have named it the model, it is really the
view-model of the MVVM pattern.  As described above, it consists of
variables that hold data, and constraints that define how those
variables are related.  The model also serves as a naming mechanism for
variables: when a variable is created, it is given a name, and stored
as a property of the model under that name.
For example, when defining the model ~model~,
a variable created with the name ~x~ is accessible as ~model.x~.

** The model builder

The task of building a model is rather complex, involving calls to multiple
functions with long signatures.  To help in constructing models, HotDrink
contains an object called the /model builder/.  The model builder
essentially defines its own language (i.e., an /embedded domain-specific language/)
for constructing constraint systems.  To use
the language, create a new model builder instance, then call its
various member functions to add elements to the model. These member
functions are described in detail in [[file:basics.org][Basic HotDrink Usage]]. The
~end~ member function retrieves the constructed model.
#+BEGIN_SRC js
var builder = new hd.ModelBuilder();

// ...invoke various builder member functions to build the model ...

var model = builder.end();
#+END_SRC


** The constraint system

As explained in Section [[Constraint systems]], the heart of HotDrink is a
constraint system.  The task of the constraint system is to enforce the
constraints of the model.  However, the two are separate entities.
A model can exist without a constraint system; that simply means that no one is enforcing its constraints.

To use a constraint system, create a new instance, then register a model with a constraint system.

#+BEGIN_SRC js
var system = new hd.ConstraintSystem();

system.addComponent( model );
#+END_SRC

A model added to a constraint system can be later removed, if needed:

#+BEGIN_SRC js
system.removeComponent( model );
#+END_SRC

As those function names suggest, the full model for your application can
actually consist of several different components, and new components can be
added or removed at run-time.  For now we assume one component only and
consider it as the entire model.
