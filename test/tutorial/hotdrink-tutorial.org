#+TITLE: Hotdrink: Programmer's Guide
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+OPTIONS:   creator:nil
#+LINK_UP:   
#+LINK_HOME: 

#+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css" />

#+STYLE: 

* COMMENT Eval these!
  :PROPERTIES:
  :ID:       CDA4C902-850E-4553-A019-8F2A100D63B7
  :END:

Eval no confirmations about running code blocks during export
are asked after running the code block below (with C-c C-c)
A little dangerous, as it applies to all files afterwards.

#+begin_src emacs-lisp :exports none 
(setq org-confirm-babel-evaluate nil)
;; (setq org-export-babel-evaluate nil) 
;; (setq org-export-babel-evaluate t) 
;; one may want tos set this variable to nil, if build of the tutorial takes too long
;; when code blocks are evaluated
#+end_src

#+results:

* In a nutshell

Hotdrink is Javascript library for programming graphical user
interfaces.  The library is declarative: the programmer specifies a
/model/ of the data to be manipulated through a user interface (UI) as
a /constraint system/, and binds a /view/, set of GUI widgets, to the
model.  These two specifications fully determine the behavior of the
user interface.  Typical applications of property models are dialog
windows and forms.

* Introduction

To introduce Hotdrink, we show an implementation of a simple dialog
for selecting the dates for, say, a hotel stay:

#+begin_html
#+INCLUDE: dependencies.html
#+INCLUDE: helpers.html
#+INCLUDE: hotel.html
#+end_html

The three text boxes in this dialog are related. Updating any one of them 
causes a change in one of the other two. For example, increasing the
number of nights will either move the end date forward or the start 
date backward. The field to change is the one /least recently edited/ by the user.

Three specifications realize this dialog: (1) 
the /view/, code that defines the widgets and their placement in the
dialog window; (2) the /property model/, code that describes the constraint system
that maintains the data that is viewed and manipulated through the view's widgets; 
and (3) the /bindings/ between the view and the model.
The layout (1) is specified using HTML; the property model (2) is specified
in Javascirpt, using a little /domain-specific language/ embedded in Javascript;
and (3) is mostly embedded in the view specification.

** Property model

The property model is built up using the HotDrink API.  This JavaScript code
must be placed in the document and executed once the document has finished
loading.  (In this example we are using jQuery's =document.ready= event to
accomplish this.)  For completeness, the Javascript helper functions are shown
in FIXME.

#+begin_src javascript :exports code :tangle hotel.html
  <script type="text/javascript">
  
    var DateModel = function () {
      this.check_in = hd.variable(new Date());
      this.nights = hd.variable(2);
      this.check_out = hd.variable();
  
      hd.constraint()
        .method(this.check_out, function () { return add_days(this.check_in(), this.nights()); })
        .method(this.check_in, function () { return remove_days(this.check_out(), this.nights()); })
        .method(this.nights, function () { return day_difference(this.check_in(), this.check_out()); });
    };
    
    var model = hd.model(new DateModel());
    
    $(document).ready(function () {
      hotdrink.bind(model);
    });
  </script>
#+end_src

The model itself is a simple class consisting of only a constructor: the
=DateModel= function.  Inside the constructor, three variables are defined as
fields of the model using the =variable= API function.  The =variable=
function takes an optional parameter used to initialize the variable.  Here,
only two of the variables need to be initialized, since the value of the third
may be calculated using the constraint.

The constraint between the three variables is composed of three separate
methods, built up by chaining together calls to the =method= API function.
Each method is responsible for calculating the value of one variable using the
values of the other two.  The =method= function takes two parameters: the
variable it is calculating the value for, and a function that will return the
value for that variable.

Notice that the variables are actually proxy functions.  When the value of the
variable is required then the proxy function is called.  However, when
defining the output of a method, the proxy function itself must be passed
(without calling it).


** View and bindings

The view is straightforward HTML code, with the three =input= elements
of type =text= and their associated labels. 
The style sheet code that aligns labels etc. is, for completeness, 
shown in FIXME.

#+begin_src javascript :exports code :tangle hotel.html
<fieldset>
  <legend>Select dates</legend>
  <div>
    <label>Check in</label>
    <input id="check_in" type="text" data-bind="text: {value: check_in, convert: stringToDate, convertBack: dateToString}" />
  </div>
  <div>
    <label>Check out</label>
    <input id="check_out" type="text" data-bind="text: {value: check_out, convert: stringToDate, convertBack: dateToString}" />
  </div>
  <div>
    <label>Nights</label>
    <input type="text" data-bind="number: nights" />
  </div>
</fieldset>
#+end_src

#       <p><span data-bind="label: result"></span></p>

Noteworthy are the =data-bind= attributes that specify the bindings between a
view.  For example, the =number: nights= binding specification in the last
text box effects a binding between that text box and the variable named
=nights= in the model.  Note that the =id= attribute is also given for the
=check_in= and =check_out= inputs, but Hotdrink does not depend on this
attribute --- we chose to use jQuery.UI's /datepicker/ with the =check_in= and
=check_out= fields, which necessitated defining the =id= attribute.

There are several options associated with each binding, depending on the
binding type used.  For most binding types, if you use the default values for
all options then only the variable being bound to must be specified.  This is
the case with the =nights= binding.  However, if you need to modify some
options then you must provide a more complex value for the binding: an object
containing the options as fields.  You can see this with the binding for
=check_in= and =check_out=.

One common option for bindings are data conversion functions.  These are
necessary when the value provided by the view is not the data type expected by
the model.  In our example, the =check_in= text field provides a date as a
string; however, our model requires a Javascript =Date= object.  This data
conversion is handled by functions which are passed using the =convert= and
=convertBack= options.  For completeness, the Javascript helper functions are
shown in FIXME.

* Helper functions for manipulating dates

Here are the helper functions used in the model specification.

#+begin_src javascript :exports code :tangle helpers.html
  <script type="text/javascript">
  
  function dateToString (d) { return {value: $.datepicker.formatDate('mm/dd/yy', d)}; }
  function stringToDate (s) {
    var d= Date.parse(s);
    if (isNaN(d))
      return {error: "Invalid date format"};
    else
      return {value: new Date(d)};
  }
  
  function add_days(d, n) {
    var d2 = new Date(d.getTime());
    d2.setDate(d.getDate() + n);
    return d2;
  }
  
  function remove_days(d, n) {
    var d2 = new Date(d.getTime());
    d2.setDate(d.getDate() - n);
    return d2;
  }
  
  // 1 day in milliseconds
  var one_day=1000*60*60*24;

  function day_difference(d1, d2) {
    // Calculate the difference in milliseconds
    var difference_ms = d2.getTime() - d1.getTime();
      
    // Convert back to days and return
    return Math.round(difference_ms / one_day).toString(); 
  }
  
  // Associate datepicker with the check_in and check_out fiels,
  // and trigger a keyup event when a date is picked
  $(function() { 
    $( "#check_in" ).datepicker({
        onSelect: function() { $(this).keyup(); }
    });
    $( "#check_out" ).datepicker({
        onSelect: function() { $(this).keyup(); }
    });
  });
  </script>
#+end_src

* Dependencies

Currently these dependencies are needed to run the tutorial.

#+begin_src javascript :exports code :tangle dependencies.html
  <script type="text/javascript" src="https://raw.github.com/kriskowal/es5-shim/master/es5-shim.min.js"></script>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  <script type="text/javascript" src="../../hotdrink.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
  <script type="text/javascript" src="http://code.jquery.com/ui/1.8.18/jquery-ui.min.js"></script>
  <link type="text/css" href="http://code.jquery.com/ui/1.8.18/themes/base/jquery-ui.css" rel="Stylesheet" />
#+end_src


* Tutorial style sheet

#+begin_src css :exports code :tangle stylesheet.css
fieldset {
  padding: 1em;
  font:80%/1 sans-serif;
  }

label {
  float:left;
  width:25%;
  margin-right:0.5em;
  padding-top:0.2em;
  text-align:right;
  font-weight:bold;
  }

fieldset { border:1px solid blue }

legend {
  padding: 0.2em 0.5em;
  border:1px solid blue;
  color:blue;
  font-size:90%;
  text-align:right;
  }
#+end_src
